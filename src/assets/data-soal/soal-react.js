export const reactQuestions = [
  {
    pertanyaan: "Apa itu React?",
    pilihan: {
      a: "Library JavaScript untuk manipulasi DOM langsung",
      b: "Framework CSS",
      c: "Library JavaScript untuk membangun UI",
      d: "Bahasa pemrograman baru",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-1",
  },
  {
    pertanyaan: "Apa itu JSX dalam React?",
    pilihan: {
      a: "Sintaks khusus untuk menulis komponen dalam HTML murni",
      b: "Ekstensi file untuk CSS di React",
      c: "Sintaks yang memungkinkan kita menulis HTML di dalam JavaScript",
      d: "Library tambahan React",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-2",
  },
  {
    pertanyaan: "Fungsi dari ReactDOM.render() adalah?",
    pilihan: {
      a: "Membuat component baru",
      b: "Menghapus DOM",
      c: "Menampilkan komponen React ke DOM nyata",
      d: "Mengecek error dalam aplikasi",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-3",
  },
  {
    pertanyaan: "Komponen React dapat ditulis sebagai?",
    pilihan: {
      a: "Function dan Class",
      b: "Array dan Object",
      c: "HTML dan CSS",
      d: "String dan Number",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-4",
  },
  {
    pertanyaan: "Apa itu state dalam React?",
    pilihan: {
      a: "Parameter komponen",
      b: "Cara untuk menyimpan data lokal dalam komponen",
      c: "Properti CSS",
      d: "Komponen induk",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-5",
  },
  {
    pertanyaan: "Apa itu props dalam React?",
    pilihan: {
      a: "Fungsi untuk mengubah state",
      b: "Properti untuk styling",
      c: "Data yang dikirim dari parent ke child component",
      d: "Event handler",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-6",
  },
  {
    pertanyaan: "Fungsi utama dari useState() adalah?",
    pilihan: {
      a: "Mengatur efek samping",
      b: "Menangani routing",
      c: "Menambah elemen HTML",
      d: "Mendefinisikan dan memperbarui state lokal",
    },
    jawaban: "d",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-7",
  },
  {
    pertanyaan: "Apa yang terjadi jika state diubah?",
    pilihan: {
      a: "Komponen tidak akan dirender ulang",
      b: "Komponen akan dirender ulang secara otomatis",
      c: "Aplikasi akan berhenti",
      d: "State tidak bisa diubah",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-8",
  },
  {
    pertanyaan: "Apa arti dari 'Single Page Application' dalam konteks React?",
    pilihan: {
      a: "Semua halaman berada dalam satu file HTML dan tidak pernah berubah",
      b: "Navigasi dilakukan tanpa reload halaman",
      c: "Aplikasi hanya untuk satu halaman saja",
      d: "Aplikasi tidak menggunakan routing",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-9",
  },
  {
    pertanyaan: "useEffect() digunakan untuk?",
    pilihan: {
      a: "Mengatur efek samping seperti fetch data",
      b: "Mengganti warna latar",
      c: "Membuat state",
      d: "Menampilkan component",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-10",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika tidak menambahkan dependensi di useEffect?",
    pilihan: {
      a: "Efek hanya akan berjalan sekali",
      b: "Efek tidak akan berjalan",
      c: "Efek akan berjalan setiap render",
      d: "Efek hanya berjalan di unmount",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-11",
  },
  {
    pertanyaan: "Komponen fungsional dalam React biasanya menggunakan?",
    pilihan: {
      a: "useClass()",
      b: "useComponent()",
      c: "useState() dan useEffect()",
      d: "useRender()",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-12",
  },
  {
    pertanyaan: "Bagaimana cara mengirim data dari parent ke child component?",
    pilihan: {
      a: "Menggunakan state",
      b: "Menggunakan context",
      c: "Menggunakan props",
      d: "Tidak bisa",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-13",
  },
  {
    pertanyaan: "Apa kegunaan dari key dalam elemen list di React?",
    pilihan: {
      a: "Untuk menentukan warna background",
      b: "Untuk mempercepat rendering dan tracking perubahan elemen",
      c: "Untuk membuat routing",
      d: "Untuk styling komponen",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-14",
  },
  {
    pertanyaan: "Bagaimana cara membuat komponen baru di React?",
    pilihan: {
      a: "Dengan class atau function yang mengembalikan JSX",
      b: "Dengan tag <component>",
      c: "Dengan fungsi CSS",
      d: "Dengan file .html",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-15",
  },
  {
    pertanyaan: "Bagaimana cara menangani event klik di React?",
    pilihan: {
      a: "onclick={doSomething}",
      b: "onclick='doSomething()'",
      c: "onClick={() => doSomething()}",
      d: "click={doSomething}",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-16",
  },
  {
    pertanyaan: "Bagaimana cara membuat input dengan two-way binding di React?",
    pilihan: {
      a: "Dengan props saja",
      b: "Dengan state dan onChange",
      c: "Dengan CSS binding",
      d: "Dengan Redux",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-17",
  },
  {
    pertanyaan: "React dikembangkan oleh?",
    pilihan: {
      a: "Google",
      b: "Twitter",
      c: "Facebook (Meta)",
      d: "Microsoft",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-18",
  },
  {
    pertanyaan:
      "Manakah nama file yang biasanya digunakan untuk komponen React?",
    pilihan: {
      a: "App.css",
      b: "App.js",
      c: "App.html",
      d: "App.jsx",
    },
    jawaban: "d",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-19",
  },
  {
    pertanyaan: "Apa keuntungan utama menggunakan React?",
    pilihan: {
      a: "Lebih mudah styling CSS",
      b: "Komponen dapat digunakan ulang",
      c: "Bekerja dengan PHP",
      d: "Gratis hosting",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-20",
  },
  {
    pertanyaan: "Apa yang akan dikembalikan oleh ReactDOM.createRoot()?",
    pilihan: {
      a: "Komponen React",
      b: "Objek Root yang bisa dipakai untuk render",
      c: "Element HTML",
      d: "State awal React",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-21",
  },
  {
    pertanyaan: "Apa tujuan utama dari penggunaan React Router?",
    pilihan: {
      a: "Untuk menyimpan data user",
      b: "Untuk menambahkan efek animasi",
      c: "Untuk membuat navigasi antar halaman dalam aplikasi SPA",
      d: "Untuk styling komponen",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-22",
  },
  {
    pertanyaan: "Manakah yang merupakan hook React bawaan?",
    pilihan: {
      a: "useData",
      b: "useStorage",
      c: "useState",
      d: "useApi",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-23",
  },
  {
    pertanyaan: "Apa perbedaan utama antara props dan state di React?",
    pilihan: {
      a: "Props bisa diubah, state tidak",
      b: "Props adalah global, state lokal",
      c: "Props digunakan untuk komunikasi antar komponen, state untuk data internal",
      d: "Tidak ada perbedaan",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-24",
  },
  {
    pertanyaan:
      "Bagaimana cara menampilkan daftar item dalam React menggunakan map?",
    pilihan: {
      a: "{items.foreach(item => <li>{item}</li>)}",
      b: "{items.map(item => <li>{item}</li>)}",
      c: "{items.loop(item => <li>{item}</li>)}",
      d: "{items.render(item => <li>{item}</li>)}",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-25",
  },
  {
    pertanyaan: "Apa yang dilakukan oleh fungsi setState() di React?",
    pilihan: {
      a: "Menghapus state",
      b: "Menambahkan state baru",
      c: "Mengupdate nilai state dan merender ulang komponen",
      d: "Mengatur ulang semua props",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-26",
  },
  {
    pertanyaan:
      "Dalam hook useEffect, kapan fungsi di dalamnya dijalankan secara default?",
    pilihan: {
      a: "Setiap kali halaman dimuat",
      b: "Hanya saat pertama kali render",
      c: "Setiap kali state atau props berubah",
      d: "Saat fungsi dipanggil secara manual",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-27",
  },
  {
    pertanyaan: "Apa itu JSX dalam React?",
    pilihan: {
      a: "Bahasa pemrograman baru",
      b: "Template engine",
      c: "Ekstensi sintaks JavaScript untuk menulis elemen UI",
      d: "API khusus React",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-28",
  },
  {
    pertanyaan: "Bagaimana cara meneruskan props ke komponen anak di React?",
    pilihan: {
      a: "<Child props={data} />",
      b: "<Child data>",
      c: "<Child value=data />",
      d: "<Child data={data} />",
    },
    jawaban: "d",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-29",
  },
  {
    pertanyaan: "Apa arti dari lifting state up di React?",
    pilihan: {
      a: "Memindahkan state ke komponen induk untuk dibagikan ke anak",
      b: "Menghapus state dari semua komponen",
      c: "Mengubah semua state menjadi props",
      d: "Menduplikasi state ke semua komponen",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-30",
  },
  {
    pertanyaan: "Apa tujuan utama dari controlled component di React?",
    pilihan: {
      a: "Mengontrol layout",
      b: "Menggunakan state untuk mengelola nilai input",
      c: "Membatasi akses komponen",
      d: "Membuat komponen tidak berubah",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-31",
  },
  {
    pertanyaan: "Di React, bagaimana Anda menangani event klik?",
    pilihan: {
      a: "<button click={handleClick}>",
      b: "<button onClick={handleClick}>",
      c: "<button onTap={handleClick}>",
      d: "<button handle={click}>",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-32",
  },
  {
    pertanyaan: "Apa yang dilakukan React.Fragment?",
    pilihan: {
      a: "Membuat array dari komponen",
      b: "Menyatukan elemen tanpa tag tambahan di DOM",
      c: "Menghapus elemen",
      d: "Menambahkan event listener",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-33",
  },
  {
    pertanyaan: "Bagaimana cara mengatur default props di komponen functional?",
    pilihan: {
      a: "Component.defaultProps = {...}",
      b: "props.default = {...}",
      c: "useDefaultProps({...})",
      d: "Component.props = {...}",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-34",
  },
  {
    pertanyaan: "Apa itu virtual DOM dalam React?",
    pilihan: {
      a: "DOM yang dibuat oleh browser",
      b: "Salinan dari real DOM yang digunakan untuk optimalisasi",
      c: "Framework baru untuk UI",
      d: "Plugin React",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-35",
  },
  {
    pertanyaan: "Apa kegunaan dari key saat merender list item?",
    pilihan: {
      a: "Untuk mengatur urutan",
      b: "Untuk menghindari duplikasi",
      c: "Untuk membantu React mengidentifikasi elemen secara unik",
      d: "Untuk menyembunyikan elemen",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-36",
  },
  {
    pertanyaan: "Apa itu component life cycle dalam React (class component)?",
    pilihan: {
      a: "Proses animasi React",
      b: "Urutan event pada browser",
      c: "Fase dari mount, update, dan unmount komponen",
      d: "Waktu delay render",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-37",
  },
  {
    pertanyaan: "Apa peran dari useRef di React?",
    pilihan: {
      a: "Untuk menyimpan referensi DOM atau nilai yang tidak menyebabkan render ulang",
      b: "Untuk menyimpan style",
      c: "Untuk menyimpan URL",
      d: "Untuk membuat props",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-38",
  },
  {
    pertanyaan: "React bekerja dalam bentuk komponen. Komponen ini bersifat...",
    pilihan: {
      a: "Imperatif",
      b: "Stateful saja",
      c: "Deklaratif dan reusable",
      d: "Non modular",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-39",
  },
  {
    pertanyaan: "Bagaimana cara menggunakan useState untuk menyimpan angka?",
    pilihan: {
      a: "const [angka, simpanAngka] = useValue(0);",
      b: "const angka = useState(0);",
      c: "const [angka, simpanAngka] = useState(0);",
      d: "let angka = useState(0);",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-40",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika kita tidak memberi key yang unik pada list?",
    pilihan: {
      a: "React akan menolak untuk merender",
      b: "Aplikasi tidak akan berjalan",
      c: "Kinerja akan menurun dan perilaku tidak terduga",
      d: "Semua akan berjalan normal",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-41",
  },
  {
    pertanyaan: "useEffect dengan array dependency kosong dijalankan kapan?",
    pilihan: {
      a: "Setiap render",
      b: "Hanya saat pertama kali render",
      c: "Saat semua props berubah",
      d: "Saat ada perubahan data state",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-42",
  },
  {
    pertanyaan: "Bagaimana cara membuat event handler untuk input form?",
    pilihan: {
      a: "onSubmit={handleSubmit()}",
      b: "onChange={e => setValue(e.target.value)}",
      c: "onForm={setValue}",
      d: "handleChange={e => e.target.value}",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-43",
  },
  {
    pertanyaan: "Apa peran ReactDOM dalam React?",
    pilihan: {
      a: "Untuk membuat routing",
      b: "Untuk mengatur struktur data",
      c: "Untuk merender komponen ke DOM",
      d: "Untuk membuat layout",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-44",
  },
  {
    pertanyaan: "Apa yang dimaksud dengan lifting state up?",
    pilihan: {
      a: "Memindahkan state dari anak ke induk agar bisa dibagikan",
      b: "Menghapus state",
      c: "Menduplikasi state",
      d: "Mengubah state menjadi prop",
    },
    jawaban: "a",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-45",
  },
  {
    pertanyaan: "Apa itu Portal dalam React?",
    pilihan: {
      a: "Tempat menyimpan props",
      b: "Cara merender elemen ke luar hierarki DOM induk",
      c: "Library tambahan",
      d: "Event baru di React",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-46",
  },
  {
    pertanyaan: "Apa keuntungan menggunakan komponen reusable?",
    pilihan: {
      a: "Kinerja menurun",
      b: "Memperbanyak kode",
      c: "Meningkatkan efisiensi dan konsistensi",
      d: "Membuat lebih lambat",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-47",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika kita memanggil setState() berulang kali?",
    pilihan: {
      a: "State akan duplikat",
      b: "Komponen akan error",
      c: "Komponen akan re-render sesuai perubahan",
      d: "Tidak ada perubahan",
    },
    jawaban: "c",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-48",
  },
  {
    pertanyaan: "Apa tujuan dari React memo?",
    pilihan: {
      a: "Menyimpan log perubahan",
      b: "Meningkatkan performa dengan mencegah render ulang tidak perlu",
      c: "Membuat cache data",
      d: "Menyalin props",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-49",
  },
  {
    pertanyaan: "Bagaimana kita dapat menggunakan context di React?",
    pilihan: {
      a: "Dengan Redux",
      b: "Dengan useContext dan Context.Provider",
      c: "Dengan props chaining",
      d: "Dengan localStorage",
    },
    jawaban: "b",
    kesulitan: "beginner",
    kategori: "react",
    id: "react-50",
  },
  {
    pertanyaan: "Apa perbedaan utama antara props dan state dalam React?",
    pilihan: {
      a: "Props dapat diubah, state tidak.",
      b: "State bersifat global, props lokal.",
      c: "State dapat diubah oleh komponen itu sendiri, props tidak.",
      d: "Props hanya digunakan dalam komponen class.",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-51",
  },
  {
    pertanyaan:
      "Bagaimana cara menghindari re-render yang tidak perlu dalam komponen functional?",
    pilihan: {
      a: "Gunakan useEffect.",
      b: "Gunakan useMemo dan React.memo.",
      c: "Gunakan useState.",
      d: "Gunakan componentWillUpdate.",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-52",
  },
  {
    pertanyaan: "Apa kegunaan utama dari hook useMemo()?",
    pilihan: {
      a: "Menjalankan efek samping.",
      b: "Menyimpan data sementara.",
      c: "Menghindari perhitungan ulang yang mahal.",
      d: "Membuat state global.",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-53",
  },
  {
    pertanyaan: "useRef dapat digunakan untuk:",
    pilihan: {
      a: "Menyimpan data yang berubah tanpa memicu re-render.",
      b: "Mengakses state dari komponen parent.",
      c: "Menjalankan efek samping.",
      d: "Mengubah nilai dari props.",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-54",
  },
  {
    pertanyaan: "Apa fungsi dari Context API dalam React?",
    pilihan: {
      a: "Mengatur routing aplikasi.",
      b: "Mengelola efek samping.",
      c: "Berbagi data antar komponen tanpa props drilling.",
      d: "Mengatur lifecycle komponen.",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-55",
  },
  {
    pertanyaan: "Apa itu HOC (Higher Order Component)?",
    pilihan: {
      a: "Komponen dengan prioritas tinggi.",
      b: "Fungsi yang menerima komponen dan mengembalikan komponen baru.",
      c: "Komponen yang digunakan hanya pada class.",
      d: "Komponen dengan akses penuh ke semua props.",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-56",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika dependency array pada useEffect kosong?",
    pilihan: {
      a: "Efek dijalankan setiap render.",
      b: "Efek tidak akan pernah dijalankan.",
      c: "Efek hanya dijalankan sekali saat mount.",
      d: "Efek dijalankan setiap perubahan state.",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-57",
  },
  {
    pertanyaan: "useCallback digunakan untuk:",
    pilihan: {
      a: "Menghindari re-deklarasi fungsi pada re-render.",
      b: "Menjalankan efek saat komponen di-unmount.",
      c: "Menangkap event DOM secara manual.",
      d: "Membuat fungsi async dalam useEffect.",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-58",
  },
  {
    pertanyaan: "Bagaimana cara menggunakan lazy loading komponen di React?",
    pilihan: {
      a: "Gunakan React.memo().",
      b: "Gunakan import().",
      c: "Gunakan React.lazy dan Suspense.",
      d: "Gunakan useLazy().",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-59",
  },
  {
    pertanyaan:
      "Mengapa kita menggunakan key saat merender daftar dengan .map()?",
    pilihan: {
      a: "Untuk mengatur warna list.",
      b: "Untuk mempercepat loop.",
      c: "Untuk membantu React mengenali elemen yang berubah.",
      d: "Untuk menandai elemen terakhir.",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-60",
  },
  {
    pertanyaan: "Apa tujuan utama dari React Router?",
    pilihan: {
      a: "Mengatur warna dan tema aplikasi",
      b: "Mengelola navigasi dan routing dalam aplikasi React",
      c: "Mengatur ukuran gambar dalam React",
      d: "Mengoptimalkan rendering server",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-61",
  },
  {
    pertanyaan: "Apa itu parameter dinamis dalam React Router?",
    pilihan: {
      a: "Parameter yang berubah-ubah tiap detik",
      b: "Parameter dari URL yang bisa digunakan dalam komponen",
      c: "Data dari props",
      d: "Fungsi yang dipanggil dari parent",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-62",
  },
  {
    pertanyaan: "Apa fungsi dari `useLocation` dalam React Router?",
    pilihan: {
      a: "Mendapatkan lokasi geografis pengguna",
      b: "Menentukan tema berdasarkan lokasi",
      c: "Mendapatkan informasi lokasi URL saat ini",
      d: "Menentukan warna berdasarkan lokasi",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-63",
  },
  {
    pertanyaan: "Apa kegunaan dari `useHistory` atau `useNavigate`?",
    pilihan: {
      a: "Untuk menyimpan histori state",
      b: "Untuk berpindah halaman secara programatik",
      c: "Untuk menyimpan data form",
      d: "Untuk menghapus cache",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-64",
  },
  {
    pertanyaan: "Apa yang dilakukan oleh `React.memo`?",
    pilihan: {
      a: "Menghapus memori yang tidak dipakai",
      b: "Mencegah re-render jika props tidak berubah",
      c: "Menyalin seluruh state",
      d: "Mengoptimalkan query API",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-65",
  },
  {
    pertanyaan: "Bagaimana cara memberikan default props ke komponen function?",
    pilihan: {
      a: "function MyComponent(defaultProps) {}",
      b: "MyComponent.defaultProps = {...}",
      c: "const defaultProps = MyComponent()",
      d: "Gunakan defaultState",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-66",
  },
  {
    pertanyaan: "Kapan useEffect dengan dependency array kosong dijalankan?",
    pilihan: {
      a: "Setiap ada perubahan props",
      b: "Saat komponen di-unmount",
      c: "Hanya sekali saat komponen mount",
      d: "Setiap kali ada klik",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-67",
  },
  {
    pertanyaan: "Apa fungsi dari return pada useEffect?",
    pilihan: {
      a: "Menentukan tampilan akhir",
      b: "Membersihkan efek (cleanup)",
      c: "Menjalankan API baru",
      d: "Mengupdate props",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-68",
  },
  {
    pertanyaan: "Apa yang dilakukan useRef jika digunakan untuk DOM element?",
    pilihan: {
      a: "Menyimpan style dari element",
      b: "Mereferensikan elemen DOM secara langsung",
      c: "Menghapus element DOM",
      d: "Mengganti innerHTML",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-69",
  },
  {
    pertanyaan: "Apa itu controlled component dalam form React?",
    pilihan: {
      a: "Form dikendalikan oleh DOM",
      b: "Form yang tidak membutuhkan state",
      c: "Form yang nilai input-nya dikendalikan oleh state React",
      d: "Form yang memuat komponen anak",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-70",
  },
  {
    pertanyaan: "Apa peran utama dari Context API di React?",
    pilihan: {
      a: "Menyimpan data pada localStorage",
      b: "Mengirim props dari child ke parent",
      c: "Menyediakan cara mengirim data global tanpa props drilling",
      d: "Menambahkan efek visual",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-71",
  },
  {
    pertanyaan: "Apa itu props drilling?",
    pilihan: {
      a: "Menyalin semua props ke local state",
      b: "Menggunakan props untuk menggali DOM",
      c: "Meneruskan props melalui banyak komponen perantara",
      d: "Menghapus props dari komponen",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-72",
  },
  {
    pertanyaan: "Apa itu PureComponent di React?",
    pilihan: {
      a: "Komponen yang tidak menerima props",
      b: "Komponen yang selalu re-render",
      c: "Komponen class yang hanya re-render saat props atau state berubah",
      d: "Komponen dengan fungsi async",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-73",
  },
  {
    pertanyaan: "Bagaimana cara menghentikan re-render komponen?",
    pilihan: {
      a: "Dengan menghapus state",
      b: "Menggunakan React.memo atau PureComponent",
      c: "Menghapus seluruh props",
      d: "Menghindari penggunaan state",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-74",
  },
  {
    pertanyaan: "Apa yang dilakukan useReducer?",
    pilihan: {
      a: "Menyederhanakan pemanggilan API",
      b: "Mengelola state kompleks dengan reducer function",
      c: "Mengubah semua props menjadi state",
      d: "Menghapus efek samping",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-75",
  },
  {
    pertanyaan: "Kapan sebaiknya menggunakan useReducer daripada useState?",
    pilihan: {
      a: "Untuk data kecil",
      b: "Untuk efek samping",
      c: "Untuk state kompleks dengan banyak aksi",
      d: "Untuk menangani event",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-76",
  },
  {
    pertanyaan: "Apa arti lifting state up?",
    pilihan: {
      a: "Menyimpan state pada DOM",
      b: "Memindahkan state ke parent untuk dibagikan ke anak-anaknya",
      c: "Menghapus state lokal",
      d: "Menggabungkan semua komponen menjadi satu",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-77",
  },
  {
    pertanyaan: "Apa itu JSX?",
    pilihan: {
      a: "Template engine seperti EJS",
      b: "Sintaks penulisan HTML dalam JavaScript",
      c: "Bahasa baru dari React",
      d: "JSON Extended",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-78",
  },
  {
    pertanyaan: "Apa fungsi utama key dalam list React?",
    pilihan: {
      a: "Untuk styling elemen",
      b: "Untuk membedakan setiap elemen dan efisien saat re-render",
      c: "Untuk menambah animasi",
      d: "Untuk menambahkan ID CSS",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-79",
  },
  {
    pertanyaan: "Apa tujuan utama dari Fragment (`<></>`) di React?",
    pilihan: {
      a: "Untuk membuat komponen class",
      b: "Untuk membungkus elemen tanpa menambahkan node ekstra di DOM",
      c: "Untuk memisahkan CSS",
      d: "Untuk menampilkan komentar",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-80",
  },
  {
    pertanyaan: "Apa kelebihan utama dari penggunaan prop drilling?",
    pilihan: {
      a: "Mempermudah manajemen global state",
      b: "Mempercepat re-rendering",
      c: "Menghindari penggunaan props",
      d: "Mengirim data dari parent ke child secara eksplisit",
    },
    jawaban: "d",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-81",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika dua komponen menggunakan useState dengan nama variabel sama?",
    pilihan: {
      a: "Nilainya akan saling tertimpa",
      b: "Mereka tetap memiliki state masing-masing",
      c: "React akan menolak rendering komponen kedua",
      d: "Akan menyebabkan infinite loop",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-82",
  },
  {
    pertanyaan: "Apa efek dari memberikan key yang sama dalam list rendering?",
    pilihan: {
      a: "Render tetap berjalan normal",
      b: "React akan melakukan optimalisasi",
      c: "Bisa menyebabkan bug saat re-render",
      d: "Key tidak digunakan oleh React",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-83",
  },
  {
    pertanyaan: "Apa tujuan utama penggunaan HOC (Higher-Order Components)?",
    pilihan: {
      a: "Untuk membuat komponen class",
      b: "Untuk menghindari prop drilling",
      c: "Untuk menyisipkan props default",
      d: "Untuk membungkus dan menambahkan logika ke komponen",
    },
    jawaban: "d",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-84",
  },
  {
    pertanyaan:
      "Apa perbedaan utama antara Controlled dan Uncontrolled Components?",
    pilihan: {
      a: "Uncontrolled tidak bisa dipakai dalam form",
      b: "Controlled tidak menggunakan state",
      c: "Controlled dikendalikan oleh React state",
      d: "Uncontrolled hanya digunakan di class component",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-85",
  },
  {
    pertanyaan: "Apa itu lazy loading dalam konteks React?",
    pilihan: {
      a: "Memuat data lambat dari API",
      b: "Menunda rendering elemen DOM",
      c: "Memuat komponen saat dibutuhkan",
      d: "Mempercepat preloading data",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-86",
  },
  {
    pertanyaan: "Apa fungsi utama dari useRef di React?",
    pilihan: {
      a: "Mengakses dan memodifikasi DOM",
      b: "Menyimpan nilai state",
      c: "Melakukan rerender komponen",
      d: "Menjaga agar variabel tidak berubah",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-87",
  },
  {
    pertanyaan:
      "Apa kelemahan utama penggunaan Context API untuk data yang sering berubah?",
    pilihan: {
      a: "Konflik dengan Redux",
      b: "Bisa menyebabkan re-render berlebihan",
      c: "Tidak bisa digunakan di functional component",
      d: "Tidak mendukung async operation",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-88",
  },
  {
    pertanyaan: "Bagaimana cara membuat komponen dinamis berdasarkan props?",
    pilihan: {
      a: "Menggunakan class component",
      b: "Menggunakan switch-case di return",
      c: "Menggunakan conditional rendering",
      d: "Mengubah file JSX secara manual",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-89",
  },
  {
    pertanyaan: "Apa dampak penggunaan useEffect tanpa dependensi?",
    pilihan: {
      a: "Efek tidak akan pernah dijalankan",
      b: "Efek hanya dijalankan sekali saat mount",
      c: "Efek dijalankan setiap render",
      d: "Efek hanya dijalankan saat unmount",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-90",
  },
  {
    pertanyaan: "Apa fungsi useCallback di React?",
    pilihan: {
      a: "Membuat memo komponen",
      b: "Menyimpan fungsi yang tidak berubah antar render",
      c: "Mengakses state terbaru",
      d: "Mengganti fungsi asinkron",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-91",
  },
  {
    pertanyaan: "Kapan React melakukan batching state updates?",
    pilihan: {
      a: "Saat event handler dipicu",
      b: "Saat render manual",
      c: "Selalu pada setiap fungsi",
      d: "Hanya saat unmount",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-92",
  },
  {
    pertanyaan: "Apa tujuan utama dari Suspense di React?",
    pilihan: {
      a: "Menunda proses rendering hingga data tersedia",
      b: "Menunda pemanggilan API",
      c: "Menjalankan event handler lebih cepat",
      d: "Membatalkan loading komponen",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-93",
  },
  {
    pertanyaan: "Apa yang akan terjadi jika key pada elemen list tidak unik?",
    pilihan: {
      a: "List tetap bekerja dengan baik",
      b: "Hanya satu item yang akan dirender",
      c: "Dapat menyebabkan render yang tidak diharapkan",
      d: "Komponen tidak bisa dihapus",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-94",
  },
  {
    pertanyaan: "useMemo berguna untuk apa dalam React?",
    pilihan: {
      a: "Menghindari perubahan fungsi",
      b: "Menyimpan hasil perhitungan mahal",
      c: "Memperbarui state secara otomatis",
      d: "Membuat hook custom",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-95",
  },
  {
    pertanyaan: "Apa perbedaan mendasar antara state dan props?",
    pilihan: {
      a: "State dikirim dari parent ke child",
      b: "Props hanya bisa digunakan di class component",
      c: "State dimiliki komponen, props diterima dari luar",
      d: "Props tidak bisa diubah",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-96",
  },
  {
    pertanyaan: "Apa yang dilakukan React.forwardRef?",
    pilihan: {
      a: "Membuat ref bisa digunakan di parent",
      b: "Membuat child menerima props dari ref",
      c: "Memindahkan DOM ke parent",
      d: "Menggabungkan dua ref menjadi satu",
    },
    jawaban: "a",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-97",
  },
  {
    pertanyaan: "Mengapa penting untuk menghapus listener saat unmount?",
    pilihan: {
      a: "Agar UI lebih cepat",
      b: "Mencegah memory leak",
      c: "Meningkatkan resolusi layar",
      d: "Menjaga re-render",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-98",
  },
  {
    pertanyaan: "Apa alasan utama penggunaan key di dalam map()?",
    pilihan: {
      a: "Untuk styling",
      b: "Agar props bisa masuk",
      c: "Agar React dapat melacak elemen unik",
      d: "Untuk animasi",
    },
    jawaban: "c",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-99",
  },
  {
    pertanyaan:
      "Apa perbedaan utama antara render props dan children as function?",
    pilihan: {
      a: "Render props hanya tersedia di React Native",
      b: "Render props menaruh fungsi di dalam prop biasa",
      c: "Children as function tidak bisa menerima props",
      d: "Children as function lebih aman",
    },
    jawaban: "b",
    kesulitan: "intermediate",
    kategori: "react",
    id: "react-100",
  },
  {
    pertanyaan:
      "Apa tujuan utama dari menggunakan React.memo dalam komponen fungsional?",
    pilihan: {
      a: "Untuk memaksa re-render setiap saat",
      b: "Untuk menambahkan memoization pada fungsi utility",
      c: "Untuk mencegah re-render jika props tidak berubah",
      d: "Untuk mengakses context secara global",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-101",
  },
  {
    pertanyaan:
      "Apa manfaat utama dari menggunakan key saat merender daftar elemen dalam React?",
    pilihan: {
      a: "Untuk menandai elemen dengan warna",
      b: "Untuk menghindari peringatan console",
      c: "Untuk membantu React mengidentifikasi elemen yang berubah",
      d: "Untuk mengurutkan elemen secara otomatis",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-102",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika Anda memodifikasi state secara langsung di React, misalnya: state.value = 10?",
    pilihan: {
      a: "State akan diperbarui dengan benar",
      b: "React akan memanggil kembali render otomatis",
      c: "Tidak ada re-render yang terjadi dan mungkin menyebabkan bug",
      d: "React akan menghapus komponen dari DOM",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-103",
  },
  {
    pertanyaan: "Apa yang dilakukan useCallback dalam React?",
    pilihan: {
      a: "Mengembalikan nilai boolean",
      b: "Menghindari pembuatan fungsi baru saat re-render",
      c: "Mengelola lifecycle component",
      d: "Mengakses props di komponen anak",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-104",
  },
  {
    pertanyaan: "Apa yang dimaksud dengan Suspense di React?",
    pilihan: {
      a: "Komponen yang digunakan untuk membuat state",
      b: "Hook khusus untuk form validation",
      c: "Fitur untuk menangani komponen yang ditunda pemuatannya",
      d: "API untuk menangani kesalahan",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-105",
  },
  {
    pertanyaan:
      "Mengapa penting untuk menggunakan useRef dibandingkan querySelector dalam komponen React?",
    pilihan: {
      a: "Karena useRef memberikan kinerja yang lebih lambat",
      b: "Karena querySelector tidak bisa digunakan dalam React",
      c: "Karena useRef lebih sesuai dengan pendekatan declarative",
      d: "Karena useRef dapat merender ulang DOM",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-106",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika Anda menggunakan setState di dalam render method?",
    pilihan: {
      a: "Render akan berhenti sementara",
      b: "Akan terjadi loop render tak hingga",
      c: "Komponen akan di-unmount",
      d: "Render hanya akan terjadi sekali",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-107",
  },
  {
    pertanyaan:
      "Apa yang dilakukan oleh useLayoutEffect dibandingkan useEffect?",
    pilihan: {
      a: "Dijalankan setelah paint selesai",
      b: "Dijalankan sebelum DOM dimodifikasi",
      c: "Dijalankan sebelum browser melukis layar",
      d: "Dijalankan setelah event listeners dihapus",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-108",
  },
  {
    pertanyaan: "Apa kegunaan utama React Profiler?",
    pilihan: {
      a: "Untuk memantau penggunaan localStorage",
      b: "Untuk mengoptimalkan penggunaan Redux",
      c: "Untuk menganalisis performa rendering komponen",
      d: "Untuk melihat struktur HTML",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-109",
  },
  {
    pertanyaan: "Apa tujuan utama menggunakan Error Boundaries dalam React?",
    pilihan: {
      a: "Untuk menampilkan loader saat data di-fetch",
      b: "Untuk menangani error pada lifecycle method komponen anak",
      c: "Untuk mengatur fallback UI pada error API",
      d: "Untuk melempar error ke luar aplikasi",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-110",
  },
  {
    pertanyaan: "Apa alasan utama penggunaan lazy loading pada komponen React?",
    pilihan: {
      a: "Untuk meningkatkan kecepatan pengetikan",
      b: "Untuk mengurangi ukuran bundel awal aplikasi",
      c: "Untuk menghindari penggunaan Redux",
      d: "Untuk mengaktifkan state global",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-111",
  },
  {
    pertanyaan:
      "Manakah dari berikut ini yang merupakan contoh penggunaan Context API dengan benar?",
    pilihan: {
      a: "Menggunakan useContext di luar komponen provider",
      b: "Membuat context lalu menggunakan useReducer untuk state",
      c: "Membuat state lokal dalam useEffect",
      d: "Mengakses state menggunakan Redux store",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-112",
  },
  {
    pertanyaan:
      "Mengapa penting memberikan key yang unik pada elemen list dalam React?",
    pilihan: {
      a: "Agar React dapat menghapus event handler",
      b: "Agar React bisa melakukan diffing dengan benar saat update",
      c: "Agar elemen dapat diurutkan secara otomatis",
      d: "Agar style CSS bisa diterapkan",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-113",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika Anda menggunakan state dalam loop tanpa dependency yang tepat di useEffect?",
    pilihan: {
      a: "React akan menampilkan warning di console",
      b: "Loop tidak akan pernah dijalankan",
      c: "Aplikasi akan crash",
      d: "Akan terjadi render loop tak hingga",
    },
    jawaban: "d",
    kesulitan: "expert",
    kategori: "react",
    id: "react-114",
  },
  {
    pertanyaan: "Apa kegunaan utama dari hook useImperativeHandle?",
    pilihan: {
      a: "Menyimpan data global",
      b: "Membatasi update re-render",
      c: "Menyesuaikan instance yang diekspos dari komponen",
      d: "Mengakses state dari parent",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-115",
  },
  {
    pertanyaan: "Apa fungsi utama dari `React.StrictMode`?",
    pilihan: {
      a: "Menonaktifkan semua warning",
      b: "Menjalankan fungsi lifecycle dua kali di development untuk mendeteksi potensi bug",
      c: "Mempercepat produksi bundle",
      d: "Mengaktifkan redux secara otomatis",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-116",
  },
  {
    pertanyaan:
      "Manakah dari berikut ini adalah hasil dari `useEffect(() => {}, [])`?",
    pilihan: {
      a: "Dijalankan setiap kali komponen di-render",
      b: "Dijalankan hanya sekali saat komponen pertama kali dimount",
      c: "Tidak akan pernah dijalankan",
      d: "Dijalankan setiap kali ada perubahan state",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-117",
  },
  {
    pertanyaan:
      "Apa alasan utama memilih Redux Toolkit dibandingkan Redux konvensional?",
    pilihan: {
      a: "Karena Redux Toolkit mendukung class components",
      b: "Karena Redux Toolkit menghilangkan kebutuhan akan reducer",
      c: "Karena Redux Toolkit menyederhanakan konfigurasi dan mengurangi boilerplate",
      d: "Karena Redux Toolkit menggantikan useContext",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-118",
  },
  {
    pertanyaan:
      "Bagaimana cara terbaik mengelola form kompleks dengan banyak field di React?",
    pilihan: {
      a: "Menggunakan useRef untuk setiap field",
      b: "Membuat state terpisah untuk setiap input",
      c: "Menggunakan form library seperti Formik atau React Hook Form",
      d: "Menaruh semua input dalam useEffect",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-119",
  },
  {
    pertanyaan: "Apa yang dimaksud dengan 'controlled component' dalam React?",
    pilihan: {
      a: "Komponen yang tidak memiliki state",
      b: "Komponen yang hanya dikendalikan oleh Redux",
      c: "Komponen yang menerima value dari props saja",
      d: "Komponen yang memiliki value input yang dikontrol oleh state React",
    },
    jawaban: "d",
    kesulitan: "expert",
    kategori: "react",
    id: "react-120",
  },
  {
    pertanyaan: "Apa fungsi utama dari `memo` pada React?",
    pilihan: {
      a: "Untuk membuat state menjadi global",
      b: "Untuk menyimpan komponen dalam cache agar tidak selalu re-render",
      c: "Untuk menampilkan memo hasil API",
      d: "Untuk menghindari penggunaan useEffect",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-121",
  },
  {
    pertanyaan:
      "Mengapa penggunaan `index` sebagai key dalam list rendering tidak disarankan?",
    pilihan: {
      a: "Karena menyebabkan duplikasi data",
      b: "Karena React tidak mendukungnya",
      c: "Karena dapat menyebabkan bug saat list berubah urutan",
      d: "Karena akan memicu re-render seluruh komponen",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-122",
  },
  {
    pertanyaan:
      "Apa hasil dari `React.createRef()` saat digunakan dalam komponen class?",
    pilihan: {
      a: "Membuat state baru",
      b: "Membuat sebuah fungsi update",
      c: "Menghasilkan objek ref untuk mengakses elemen DOM",
      d: "Menambahkan props secara otomatis",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-123",
  },
  {
    pertanyaan:
      "Apa manfaat utama penggunaan `useLayoutEffect` dibanding `useEffect`?",
    pilihan: {
      a: "Memungkinkan pemanggilan asynchronous",
      b: "Berjalan setelah layout selesai tetapi sebelum paint",
      c: "Tidak ada perbedaan",
      d: "Memungkinkan update props",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-124",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika `useState` dipanggil secara kondisional?",
    pilihan: {
      a: "React tetap bisa melacak state dengan baik",
      b: "Akan muncul error karena hooks harus dipanggil secara konsisten",
      c: "Tidak ada yang terjadi",
      d: "State akan menjadi global",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-125",
  },
  {
    pertanyaan: "Manakah dari pernyataan berikut yang benar tentang `useRef`?",
    pilihan: {
      a: "Menyebabkan re-render setiap kali nilainya berubah",
      b: "Hanya dapat digunakan untuk menyimpan elemen DOM",
      c: "Nilainya dapat diubah tanpa menyebabkan re-render",
      d: "Hanya digunakan di komponen class",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-126",
  },
  {
    pertanyaan: "Apa yang dimaksud dengan 'lifting state up' di React?",
    pilihan: {
      a: "Memindahkan state ke komponen anak",
      b: "Membuat state menjadi global",
      c: "Memindahkan state ke komponen parent untuk digunakan bersama",
      d: "Menduplikat state ke seluruh komponen",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-127",
  },
  {
    pertanyaan: "Apa yang dilakukan oleh `useMemo` di React?",
    pilihan: {
      a: "Menyimpan seluruh komponen di memory",
      b: "Menghindari pemanggilan ulang fungsi yang berat kecuali dependency berubah",
      c: "Menghapus memori saat unmount",
      d: "Mengganti DOM secara manual",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-128",
  },
  {
    pertanyaan: "Apa perbedaan utama antara `props` dan `state` di React?",
    pilihan: {
      a: "State hanya bisa digunakan di class component, props hanya di function",
      b: "Props bersifat statis, state bisa berubah",
      c: "Props bisa menyebabkan re-render, state tidak",
      d: "Props digunakan di Redux, state tidak",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-129",
  },
  {
    pertanyaan:
      "Apa konsekuensi dari tidak meng-unsubscribe saat menggunakan `useEffect` dengan event listener?",
    pilihan: {
      a: "Kode akan lebih cepat",
      b: "Tidak ada konsekuensi",
      c: "Akan terjadi memory leak",
      d: "Event akan otomatis hilang saat re-render",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-130",
  },
  {
    pertanyaan:
      "Manakah metode yang paling tepat untuk menghindari re-render pada komponen anak jika props-nya tidak berubah?",
    pilihan: {
      a: "Menggunakan useState",
      b: "Menggunakan useEffect",
      c: "Membungkus komponen dengan React.memo",
      d: "Menggunakan class component",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-131",
  },
  {
    pertanyaan: "Apa tujuan utama dari `useImperativeHandle`?",
    pilihan: {
      a: "Mengatur state global",
      b: "Mengekspor fungsi imperatif ke parent melalui ref",
      c: "Memperbarui state anak dari parent",
      d: "Membuat hooks custom",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-132",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika kita menempatkan `useState` di dalam loop?",
    pilihan: {
      a: "State akan direset setiap render",
      b: "React akan error karena hooks harus konsisten di tiap render",
      c: "Semua state akan digabung",
      d: "State akan tetap berfungsi seperti biasa",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-133",
  },
  {
    pertanyaan: "Apa fungsi dari context di React?",
    pilihan: {
      a: "Untuk menyimpan data di server",
      b: "Untuk menyederhanakan state di dalam komponen",
      c: "Untuk berbagi data ke banyak komponen tanpa prop drilling",
      d: "Untuk mempercepat render komponen",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-134",
  },
  {
    pertanyaan: "Apa kegunaan utama `React.lazy`?",
    pilihan: {
      a: "Untuk mendeklarasikan variabel global",
      b: "Untuk menginisialisasi hooks",
      c: "Untuk melakukan lazy loading pada komponen",
      d: "Untuk mengatur delay pada komponen",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-135",
  },
  {
    pertanyaan:
      "Mengapa perlu menggunakan `Suspense` saat menggunakan `React.lazy`?",
    pilihan: {
      a: "Karena `React.lazy` membutuhkan context",
      b: "Untuk menangani fallback saat komponen belum selesai dimuat",
      c: "Untuk mencegah error saat loading",
      d: "Agar dapat menggunakan useEffect",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-136",
  },
  {
    pertanyaan:
      "Bagaimana cara terbaik menangani error saat render komponen di React?",
    pilihan: {
      a: "Menggunakan try...catch",
      b: "Menggunakan Error Boundaries",
      c: "Menggunakan useError",
      d: "Dengan wrapping useEffect",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-137",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika `setState` dipanggil dua kali berturut-turut?",
    pilihan: {
      a: "Kedua pemanggilan akan digabung (batching)",
      b: "Hanya pemanggilan pertama yang dijalankan",
      c: "State akan dikembalikan ke nilai awal",
      d: "Terjadi infinite loop",
    },
    jawaban: "a",
    kesulitan: "expert",
    kategori: "react",
    id: "react-138",
  },
  {
    pertanyaan: "Apa yang dimaksud dengan Hydration dalam aplikasi React?",
    pilihan: {
      a: "Mengisi data ke dalam database",
      b: "Proses sinkronisasi antara HTML statis dan DOM interaktif oleh React",
      c: "Mengisi form secara otomatis",
      d: "Menghapus cache dan data lokal",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-139",
  },
  {
    pertanyaan: "Apa manfaat dari penggunaan `key` dalam list rendering?",
    pilihan: {
      a: "Untuk mengurutkan elemen secara otomatis",
      b: "Untuk mempercepat style rendering",
      c: "Untuk membantu React mengidentifikasi item yang berubah",
      d: "Untuk menghindari pemakaian props",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-140",
  },
  {
    pertanyaan:
      "Apa yang terjadi jika `key` tidak unik dalam daftar elemen di React?",
    pilihan: {
      a: "React akan me-render semua ulang dengan efisien",
      b: "React tidak akan merender daftar",
      c: "Render bisa tidak konsisten dan performa menurun",
      d: "Tidak akan ada masalah apapun",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-141",
  },
  {
    pertanyaan: "Mengapa `useCallback` digunakan dalam React?",
    pilihan: {
      a: "Untuk menyimpan nilai konstanta",
      b: "Untuk menghindari pembuatan ulang fungsi pada setiap render",
      c: "Untuk mengatur callback di useEffect",
      d: "Untuk menggantikan props",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-142",
  },
  {
    pertanyaan: "Apa tujuan utama dari `forwardRef` di React?",
    pilihan: {
      a: "Untuk memanggil fungsi parent dari child",
      b: "Untuk meneruskan ref ke DOM element dari komponen anak",
      c: "Untuk membuat ref global",
      d: "Untuk mengakses state komponen lain",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-143",
  },
  {
    pertanyaan:
      "Bagaimana React menentukan apakah komponen harus di-render ulang?",
    pilihan: {
      a: "Dengan melihat urutan deklarasi komponen",
      b: "Dengan membandingkan state dan props baru dengan sebelumnya",
      c: "Dengan membaca file JSX",
      d: "Dengan melakukan request ulang ke server",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-144",
  },
  {
    pertanyaan:
      "Apa yang akan terjadi jika `useEffect` tidak menyertakan dependency array?",
    pilihan: {
      a: "Efek akan dijalankan hanya sekali",
      b: "Efek tidak akan dijalankan sama sekali",
      c: "Efek akan dijalankan setiap kali komponen dirender",
      d: "Efek hanya dijalankan saat componentWillUnmount",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-145",
  },
  {
    pertanyaan:
      "Apa kelemahan umum dari penggunaan state yang berlebihan dalam satu komponen?",
    pilihan: {
      a: "Komponen tidak bisa di-unmount",
      b: "Debug menjadi lebih sulit dan re-render tidak efisien",
      c: "State tidak bisa berubah",
      d: "Props tidak bisa dikirim",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-146",
  },
  {
    pertanyaan:
      "Manakah dari berikut ini BUKAN merupakan hook built-in dari React?",
    pilihan: {
      a: "useReducer",
      b: "useLayoutEffect",
      c: "usePrevious",
      d: "useMemo",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-147",
  },
  {
    pertanyaan: "Apa perbedaan utama antara `useMemo` dan `useCallback`?",
    pilihan: {
      a: "useMemo menyimpan nilai, useCallback menyimpan fungsi",
      b: "useMemo digunakan untuk side effect",
      c: "useCallback lebih cepat dari useMemo",
      d: "Keduanya tidak memiliki perbedaan",
    },
    jawaban: "a",
    kesulitan: "expert",
    kategori: "react",
    id: "react-148",
  },
  {
    pertanyaan:
      "Manakah strategi terbaik untuk menghindari prop drilling yang kompleks?",
    pilihan: {
      a: "Menggunakan state lokal di setiap komponen",
      b: "Menggunakan Redux atau Context API",
      c: "Menggunakan class component",
      d: "Membagi props menjadi lebih banyak",
    },
    jawaban: "b",
    kesulitan: "expert",
    kategori: "react",
    id: "react-149",
  },
  {
    pertanyaan:
      "Bagaimana cara mengoptimasi performa render list yang sangat panjang di React?",
    pilihan: {
      a: "Menggunakan key yang sama",
      b: "Menggunakan komponen class",
      c: "Menggunakan virtualisasi (seperti react-window)",
      d: "Menggunakan inline function pada render",
    },
    jawaban: "c",
    kesulitan: "expert",
    kategori: "react",
    id: "react-150",
  },
];
